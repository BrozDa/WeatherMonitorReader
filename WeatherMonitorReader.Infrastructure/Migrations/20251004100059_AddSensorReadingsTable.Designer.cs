// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherMonitorReader.Infrastructure.Persistence;

#nullable disable

namespace WeatherMonitorReader.Infrastructure.Migrations
{
    [DbContext(typeof(WeatherMonitorContext))]
    [Migration("20251004100059_AddSensorReadingsTable")]
    partial class AddSensorReadingsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WeatherMonitorReader.Domain.Models.WeatherMonitor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DegreeUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firmware")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PressureType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PressureUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WeatherMonitors");
                });

            modelBuilder.Entity("WeatherMonitorReader.Domain.Models.WeatherMonitorSensor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Direction")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SensorId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WeatherMonitorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WeatherMonitorId");

                    b.ToTable("WeatherMonitorSensors");
                });

            modelBuilder.Entity("WeatherMonitorReader.Domain.Models.WeatherMonitorSensorReading", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SensorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SnapshotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.HasIndex("SnapshotId");

                    b.ToTable("WeatherMonitorSensorReadings");
                });

            modelBuilder.Entity("WeatherMonitorReader.Domain.Models.WeatherMonitorSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Freemem")
                        .HasColumnType("int");

                    b.Property<int>("Runtime")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.Property<Guid>("WeatherMonitorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WeatherMonitorId");

                    b.ToTable("WeatherMonitorSnapshots");
                });

            modelBuilder.Entity("WeatherMonitorReader.Domain.Models.WeatherMonitorSnapshotMinMax", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Max")
                        .HasColumnType("float");

                    b.Property<double>("Min")
                        .HasColumnType("float");

                    b.Property<Guid>("SensorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SnapshotId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.HasIndex("SnapshotId");

                    b.ToTable("WeatherMonitorSnapshotMinMaxes");
                });

            modelBuilder.Entity("WeatherMonitorReader.Domain.Models.WeatherMonitorVariables", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Agl")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("Astroend")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("Astrolen")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("Astrostart")
                        .HasColumnType("time");

                    b.Property<int>("Bio")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("Civend")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("Civlen")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("Civstart")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("Daylen")
                        .HasColumnType("time");

                    b.Property<int>("Fog")
                        .HasColumnType("int");

                    b.Property<bool>("IsDay")
                        .HasColumnType("bit");

                    b.Property<int>("Lsp")
                        .HasColumnType("int");

                    b.Property<int>("Moonphase")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("Nautend")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("Nautlen")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("Nautstart")
                        .HasColumnType("time");

                    b.Property<double>("PressureOld")
                        .HasColumnType("float");

                    b.Property<TimeOnly>("Sunrise")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("Sunset")
                        .HasColumnType("time");

                    b.Property<double>("TemperatureAvg")
                        .HasColumnType("float");

                    b.Property<Guid>("WeatherMonitorSnapshotId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WeatherMonitorSnapshotId")
                        .IsUnique();

                    b.ToTable("WeatherMonitorVariables");
                });

            modelBuilder.Entity("WeatherMonitorReader.Domain.Models.WeatherMonitorSensor", b =>
                {
                    b.HasOne("WeatherMonitorReader.Domain.Models.WeatherMonitor", "WeatherMonitor")
                        .WithMany("Sensors")
                        .HasForeignKey("WeatherMonitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeatherMonitor");
                });

            modelBuilder.Entity("WeatherMonitorReader.Domain.Models.WeatherMonitorSensorReading", b =>
                {
                    b.HasOne("WeatherMonitorReader.Domain.Models.WeatherMonitorSensor", "Sensor")
                        .WithMany("SensorReadings")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WeatherMonitorReader.Domain.Models.WeatherMonitorSnapshot", "Snapshot")
                        .WithMany("SensorReadings")
                        .HasForeignKey("SnapshotId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Sensor");

                    b.Navigation("Snapshot");
                });

            modelBuilder.Entity("WeatherMonitorReader.Domain.Models.WeatherMonitorSnapshot", b =>
                {
                    b.HasOne("WeatherMonitorReader.Domain.Models.WeatherMonitor", "WeatherMonitor")
                        .WithMany("Snapshots")
                        .HasForeignKey("WeatherMonitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeatherMonitor");
                });

            modelBuilder.Entity("WeatherMonitorReader.Domain.Models.WeatherMonitorSnapshotMinMax", b =>
                {
                    b.HasOne("WeatherMonitorReader.Domain.Models.WeatherMonitorSensor", "Sensor")
                        .WithMany("SensorMinMaxes")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WeatherMonitorReader.Domain.Models.WeatherMonitorSnapshot", "Snapshot")
                        .WithMany("SensorMinMaxes")
                        .HasForeignKey("SnapshotId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Sensor");

                    b.Navigation("Snapshot");
                });

            modelBuilder.Entity("WeatherMonitorReader.Domain.Models.WeatherMonitorVariables", b =>
                {
                    b.HasOne("WeatherMonitorReader.Domain.Models.WeatherMonitorSnapshot", "WeatherMonitorSnapshot")
                        .WithOne("WeatherMonitorVariables")
                        .HasForeignKey("WeatherMonitorReader.Domain.Models.WeatherMonitorVariables", "WeatherMonitorSnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeatherMonitorSnapshot");
                });

            modelBuilder.Entity("WeatherMonitorReader.Domain.Models.WeatherMonitor", b =>
                {
                    b.Navigation("Sensors");

                    b.Navigation("Snapshots");
                });

            modelBuilder.Entity("WeatherMonitorReader.Domain.Models.WeatherMonitorSensor", b =>
                {
                    b.Navigation("SensorMinMaxes");

                    b.Navigation("SensorReadings");
                });

            modelBuilder.Entity("WeatherMonitorReader.Domain.Models.WeatherMonitorSnapshot", b =>
                {
                    b.Navigation("SensorMinMaxes");

                    b.Navigation("SensorReadings");

                    b.Navigation("WeatherMonitorVariables")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
